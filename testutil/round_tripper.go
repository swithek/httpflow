// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package testutil

import (
	"net/http"
	"sync"
)

var (
	lockRoundTripperMockRoundTrip sync.RWMutex
)

// Ensure, that RoundTripperMock does implement http.RoundTripper.
// If this is not the case, regenerate this file with moq.
var _ http.RoundTripper = &RoundTripperMock{}

// RoundTripperMock is a mock implementation of http.RoundTripper.
//
//     func TestSomethingThatUsesRoundTripper(t *testing.T) {
//
//         // make and configure a mocked http.RoundTripper
//         mockedRoundTripper := &RoundTripperMock{
//             RoundTripFunc: func(in1 *http.Request) (*http.Response, error) {
// 	               panic("mock out the RoundTrip method")
//             },
//         }
//
//         // use mockedRoundTripper in code that requires RoundTripper
//         // and then make assertions.
//
//     }
type RoundTripperMock struct {
	// RoundTripFunc mocks the RoundTrip method.
	RoundTripFunc func(in1 *http.Request) (*http.Response, error)

	// calls tracks calls to the methods.
	calls struct {
		// RoundTrip holds details about calls to the RoundTrip method.
		RoundTrip []struct {
			// In1 is the in1 argument value.
			In1 *http.Request
		}
	}
}

// RoundTrip calls RoundTripFunc.
func (mock *RoundTripperMock) RoundTrip(in1 *http.Request) (*http.Response, error) {
	if mock.RoundTripFunc == nil {
		panic("RoundTripperMock.RoundTripFunc: method is nil but RoundTripper.RoundTrip was just called")
	}
	callInfo := struct {
		In1 *http.Request
	}{
		In1: in1,
	}
	lockRoundTripperMockRoundTrip.Lock()
	mock.calls.RoundTrip = append(mock.calls.RoundTrip, callInfo)
	lockRoundTripperMockRoundTrip.Unlock()
	return mock.RoundTripFunc(in1)
}

// RoundTripCalls gets all the calls that were made to RoundTrip.
// Check the length with:
//     len(mockedRoundTripper.RoundTripCalls())
func (mock *RoundTripperMock) RoundTripCalls() []struct {
	In1 *http.Request
} {
	var calls []struct {
		In1 *http.Request
	}
	lockRoundTripperMockRoundTrip.RLock()
	calls = mock.calls.RoundTrip
	lockRoundTripperMockRoundTrip.RUnlock()
	return calls
}
