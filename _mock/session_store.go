// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"context"
	"github.com/swithek/sessionup"
	"sync"
)

var (
	lockSessionStoreCreate          sync.RWMutex
	lockSessionStoreDeleteByID      sync.RWMutex
	lockSessionStoreDeleteByUserKey sync.RWMutex
	lockSessionStoreFetchByID       sync.RWMutex
	lockSessionStoreFetchByUserKey  sync.RWMutex
)

// Ensure, that SessionStore does implement sessionup.Store.
// If this is not the case, regenerate this file with moq.
var _ sessionup.Store = &SessionStore{}

// SessionStore is a mock implementation of sessionup.Store.
//
//     func TestSomethingThatUsesStore(t *testing.T) {
//
//         // make and configure a mocked sessionup.Store
//         mockedStore := &SessionStore{
//             CreateFunc: func(ctx context.Context, s sessionup.Session) error {
// 	               panic("mock out the Create method")
//             },
//             DeleteByIDFunc: func(ctx context.Context, id string) error {
// 	               panic("mock out the DeleteByID method")
//             },
//             DeleteByUserKeyFunc: func(ctx context.Context, key string, expID ...string) error {
// 	               panic("mock out the DeleteByUserKey method")
//             },
//             FetchByIDFunc: func(ctx context.Context, id string) (sessionup.Session, bool, error) {
// 	               panic("mock out the FetchByID method")
//             },
//             FetchByUserKeyFunc: func(ctx context.Context, key string) ([]sessionup.Session, error) {
// 	               panic("mock out the FetchByUserKey method")
//             },
//         }
//
//         // use mockedStore in code that requires sessionup.Store
//         // and then make assertions.
//
//     }
type SessionStore struct {
	// CreateFunc mocks the Create method.
	CreateFunc func(ctx context.Context, s sessionup.Session) error

	// DeleteByIDFunc mocks the DeleteByID method.
	DeleteByIDFunc func(ctx context.Context, id string) error

	// DeleteByUserKeyFunc mocks the DeleteByUserKey method.
	DeleteByUserKeyFunc func(ctx context.Context, key string, expID ...string) error

	// FetchByIDFunc mocks the FetchByID method.
	FetchByIDFunc func(ctx context.Context, id string) (sessionup.Session, bool, error)

	// FetchByUserKeyFunc mocks the FetchByUserKey method.
	FetchByUserKeyFunc func(ctx context.Context, key string) ([]sessionup.Session, error)

	// calls tracks calls to the methods.
	calls struct {
		// Create holds details about calls to the Create method.
		Create []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// S is the s argument value.
			S sessionup.Session
		}
		// DeleteByID holds details about calls to the DeleteByID method.
		DeleteByID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
		}
		// DeleteByUserKey holds details about calls to the DeleteByUserKey method.
		DeleteByUserKey []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Key is the key argument value.
			Key string
			// ExpID is the expID argument value.
			ExpID []string
		}
		// FetchByID holds details about calls to the FetchByID method.
		FetchByID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
		}
		// FetchByUserKey holds details about calls to the FetchByUserKey method.
		FetchByUserKey []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Key is the key argument value.
			Key string
		}
	}
}

// Create calls CreateFunc.
func (mock *SessionStore) Create(ctx context.Context, s sessionup.Session) error {
	if mock.CreateFunc == nil {
		panic("SessionStore.CreateFunc: method is nil but Store.Create was just called")
	}
	callInfo := struct {
		Ctx context.Context
		S   sessionup.Session
	}{
		Ctx: ctx,
		S:   s,
	}
	lockSessionStoreCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	lockSessionStoreCreate.Unlock()
	return mock.CreateFunc(ctx, s)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//     len(mockedStore.CreateCalls())
func (mock *SessionStore) CreateCalls() []struct {
	Ctx context.Context
	S   sessionup.Session
} {
	var calls []struct {
		Ctx context.Context
		S   sessionup.Session
	}
	lockSessionStoreCreate.RLock()
	calls = mock.calls.Create
	lockSessionStoreCreate.RUnlock()
	return calls
}

// DeleteByID calls DeleteByIDFunc.
func (mock *SessionStore) DeleteByID(ctx context.Context, id string) error {
	if mock.DeleteByIDFunc == nil {
		panic("SessionStore.DeleteByIDFunc: method is nil but Store.DeleteByID was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  string
	}{
		Ctx: ctx,
		ID:  id,
	}
	lockSessionStoreDeleteByID.Lock()
	mock.calls.DeleteByID = append(mock.calls.DeleteByID, callInfo)
	lockSessionStoreDeleteByID.Unlock()
	return mock.DeleteByIDFunc(ctx, id)
}

// DeleteByIDCalls gets all the calls that were made to DeleteByID.
// Check the length with:
//     len(mockedStore.DeleteByIDCalls())
func (mock *SessionStore) DeleteByIDCalls() []struct {
	Ctx context.Context
	ID  string
} {
	var calls []struct {
		Ctx context.Context
		ID  string
	}
	lockSessionStoreDeleteByID.RLock()
	calls = mock.calls.DeleteByID
	lockSessionStoreDeleteByID.RUnlock()
	return calls
}

// DeleteByUserKey calls DeleteByUserKeyFunc.
func (mock *SessionStore) DeleteByUserKey(ctx context.Context, key string, expID ...string) error {
	if mock.DeleteByUserKeyFunc == nil {
		panic("SessionStore.DeleteByUserKeyFunc: method is nil but Store.DeleteByUserKey was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Key   string
		ExpID []string
	}{
		Ctx:   ctx,
		Key:   key,
		ExpID: expID,
	}
	lockSessionStoreDeleteByUserKey.Lock()
	mock.calls.DeleteByUserKey = append(mock.calls.DeleteByUserKey, callInfo)
	lockSessionStoreDeleteByUserKey.Unlock()
	return mock.DeleteByUserKeyFunc(ctx, key, expID...)
}

// DeleteByUserKeyCalls gets all the calls that were made to DeleteByUserKey.
// Check the length with:
//     len(mockedStore.DeleteByUserKeyCalls())
func (mock *SessionStore) DeleteByUserKeyCalls() []struct {
	Ctx   context.Context
	Key   string
	ExpID []string
} {
	var calls []struct {
		Ctx   context.Context
		Key   string
		ExpID []string
	}
	lockSessionStoreDeleteByUserKey.RLock()
	calls = mock.calls.DeleteByUserKey
	lockSessionStoreDeleteByUserKey.RUnlock()
	return calls
}

// FetchByID calls FetchByIDFunc.
func (mock *SessionStore) FetchByID(ctx context.Context, id string) (sessionup.Session, bool, error) {
	if mock.FetchByIDFunc == nil {
		panic("SessionStore.FetchByIDFunc: method is nil but Store.FetchByID was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  string
	}{
		Ctx: ctx,
		ID:  id,
	}
	lockSessionStoreFetchByID.Lock()
	mock.calls.FetchByID = append(mock.calls.FetchByID, callInfo)
	lockSessionStoreFetchByID.Unlock()
	return mock.FetchByIDFunc(ctx, id)
}

// FetchByIDCalls gets all the calls that were made to FetchByID.
// Check the length with:
//     len(mockedStore.FetchByIDCalls())
func (mock *SessionStore) FetchByIDCalls() []struct {
	Ctx context.Context
	ID  string
} {
	var calls []struct {
		Ctx context.Context
		ID  string
	}
	lockSessionStoreFetchByID.RLock()
	calls = mock.calls.FetchByID
	lockSessionStoreFetchByID.RUnlock()
	return calls
}

// FetchByUserKey calls FetchByUserKeyFunc.
func (mock *SessionStore) FetchByUserKey(ctx context.Context, key string) ([]sessionup.Session, error) {
	if mock.FetchByUserKeyFunc == nil {
		panic("SessionStore.FetchByUserKeyFunc: method is nil but Store.FetchByUserKey was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Key string
	}{
		Ctx: ctx,
		Key: key,
	}
	lockSessionStoreFetchByUserKey.Lock()
	mock.calls.FetchByUserKey = append(mock.calls.FetchByUserKey, callInfo)
	lockSessionStoreFetchByUserKey.Unlock()
	return mock.FetchByUserKeyFunc(ctx, key)
}

// FetchByUserKeyCalls gets all the calls that were made to FetchByUserKey.
// Check the length with:
//     len(mockedStore.FetchByUserKeyCalls())
func (mock *SessionStore) FetchByUserKeyCalls() []struct {
	Ctx context.Context
	Key string
} {
	var calls []struct {
		Ctx context.Context
		Key string
	}
	lockSessionStoreFetchByUserKey.RLock()
	calls = mock.calls.FetchByUserKey
	lockSessionStoreFetchByUserKey.RUnlock()
	return calls
}
